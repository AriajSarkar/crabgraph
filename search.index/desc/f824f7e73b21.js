rd_("AjContains the success valueCbAES Key Wrap (AES-KW) implementation per RFC 3394.AhContains the error valueB`Key Derivation Functions (KDFs).BdGet a reference to the key material.BoThe actual key material (auto-zeroized on drop)BfReturns the signature length in bytes.BfReturns the length of the secret data.B`Returns the length of the array.BlMessage Authentication Code (MAC) utilities.CfCreates a new <code>Ciphertext</code> from components.CdCreates a new AES-128-GCM cipher from a 16-byte key.CdCreates a new AES-256-GCM cipher from a 32-byte key.CjCreates a new ChaCha20-Poly1305 cipher from a 32-byte key.CeCreates a new streaming encryptor from a 32-byte key.0CfCreate a new key rotation manager with an initial key.AkCreate a new versioned key.C`Create a new AES-128 Key Wrap cipher from a KEK.C`Create a new AES-256 Key Wrap cipher from a KEK.C`Create a new AES-192 Key Wrap cipher from a KEK.ChCreates a new <code>SecretVec</code> from a byte vector.CiCreates a new <code>SecretArray</code> from a byte array.AnRSA encryption and signatures.AmAuthentication tag (16 bytes)CeAuthenticated Encryption with Associated Data (AEAD).CbAsymmetric cryptography (public-key cryptography).AoReturns the argument unchanged.0000000000000000000000000ClHashing utilities using SHA-2, SHA-3, BLAKE2, and BLAKE3 \xe2\x80\xa6CfHKDF (HMAC-based Extract-and-Expand Key Derivation \xe2\x80\xa6BaCalls <code>U::from(self)</code>.0000000000000000000000000BkAll key versions (version number -&gt; key)BjSecure random number generation utilities.BkSigns a message using RSA-PSS with SHA-256.BjSigns a message and returns the signature.CgCreates a new <code>SecretVec</code> filled with zeros.CiCreates a new <code>SecretArray</code> filled with zeros.AhAES-128 Key Wrap cipher.AhAES-192 Key Wrap cipher.AhAES-256 Key Wrap cipher.CkNonce/IV used for this encryption (12 bytes for AES-GCM \xe2\x80\xa6BgReturns the nonce used for this stream.0BoUtility functions for cryptographic operations.AfArgon2 key derivation.CcError types for CrabGraph cryptographic operations.AfPBKDF2 key derivation.AlRotate to a new key version.BhComputes SHA-256 hash of the input data.BhComputes SHA-512 hash of the input data.BjStreaming AEAD encryption for large files.AiEncodes signature to hex.0AjEncodes public key to hex.0BmExports the public key as PEM-encoded PKCS#8.BnExports the private key as PEM-encoded PKCS#8.BkVerifies an RSA-PSS signature with SHA-256.DbVerifies a signature (same as <code>public_key().verify()</code>).ClVerifies a signature on a message using this keypair\xe2\x80\x99s \xe2\x80\xa6BbVerifies a signature on a message.BcX25519 Diffie-Hellman key exchange.A`Library version.BaAES-GCM authenticated encryption.CbDecrypts ciphertext with optional associated data.BjDecrypts data using RSA-OAEP with SHA-256.BjDecrypt data using a specific key version.CjReturns recommended parameters for interactive use (2025).AkEd25519 digital signatures.CaEncrypts plaintext with optional associated data.BjEncrypts data using RSA-OAEP with SHA-256.BoEncrypts data using the public key (same as \xe2\x80\xa6CcEncrypt data with the current (latest) key version.BfPrelude module for convenient imports.CeSecure secret handling with automatic memory zeroing.AgGet the version number.B`The version number (starts at 1)CkTrait for Authenticated Encryption with Associated Data \xe2\x80\xa6CfInternal error (should not happen in normal operation)BgKEK size in bytes (16 bytes = 128 bits)BgKEK size in bytes (32 bytes = 256 bits)BgKEK size in bytes (24 bytes = 192 bits)BcKey generation or derivation failedBgThe authentication tag size (16 bytes).00B`Phantom data for the cipher typeAkReturns signature as bytes.0AlReturns public key as bytes.AoReturns shared secret as bytes.1BgReturns a reference to the secret data.0BnEncoding and decoding utilities (Base64, Hex).AkDecodes signature from hex.0AlDecodes public key from hex.0BhCreate a new cipher instance from a key.CcCreate a manager from an existing key as version 1.CdCreates a public key from PEM-encoded PKCS#8 format.CaCreates a keypair from PEM-encoded PKCS#8 format.ChGenerates a new RSA keypair with the specified bit size.BgGenerates a new random Ed25519 keypair.BfGenerates a new random X25519 keypair.BgReturns true if the signature is empty.CaReturns <code>true</code> if the secret is empty.CfReturns <code>true</code> if the array length is zero.BiComputes SHA3-256 hash of the input data.BiComputes SHA3-512 hash of the input data.BoSerializes to bytes: nonce || ciphertext || tagBcWrap (encrypt) a cryptographic key.00BaAES-128-GCM cipher (128-bit key).BaAES-256-GCM cipher (256-bit key).C`Unified error type for all CrabGraph operations.BlA vector that zeroizes its contents on drop.CjCrabGraph: A safe, ergonomic cryptographic library for \xe2\x80\xa6CiCreates a <code>KeyError</code> with a formatted message.CiPrivate key stored as PKCS#8 DER bytes in a zeroizing \xe2\x80\xa6AmReturns the key size in bits.0CkNumber of iterations (recommended: 3-4 for interactive use)AiEncodes to base64 string.AlEncodes signature to base64.BjEncodes public key to base64 (DER format).1AmEncodes public key to base64.0BgResult of an AEAD encryption operation.DaResult type alias using <code>CrabError</code> as the error type.BbHMAC-SHA256 tag output (32 bytes).BbHMAC-SHA512 tag output (64 bytes).BfThe nonce size for AES-GCM (12 bytes).0C`The nonce size for ChaCha20-Poly1305 (12 bytes).ChRSA keypair for encryption, decryption, signing, and \xe2\x80\xa6CkGeneric AEAD trait for authenticated encryption operations.BmComputes BLAKE3 hash with hex-encoded output.nEncrypted dataCjDerives an encryption key from the shared secret using \xe2\x80\xa6CcDeserializes from bytes: nonce || ciphertext || tagAoCreates a signature from bytes.0B`Creates a public key from bytes.BcCreates a shared secret from bytes.1CgCreates a new streaming decryptor from a key and nonce.0BfDecodes a hexadecimal string to bytes.BnEncodes bytes to lowercase hexadecimal string.EeConsumes the <code>SecretVec</code> and returns the inner <code>Vec&lt;u8&gt;</code>.CiCreates parameters optimized for low-memory environments.AgReturns the public key.00CjRe-encrypt data from an old key version to the current \xe2\x80\xa6BnComputes SHA-256 hash with hex-encoded output.BnComputes SHA-512 hash with hex-encoded output.AnReturns the key size in bytes.0AoUnwrap (decrypt) a wrapped key.00CeCryptographic operation failed (e.g., decryption, \xe2\x80\xa6AoRandom number generation failedBiA fixed-size array that zeroizes on drop.BlComputes BLAKE2b-512 hash of the input data.BlComputes BLAKE2s-256 hash of the input data.BgComputes BLAKE3 hash of the input data.AkDecodes from base64 string.AnDecodes signature from base64.BlDecodes public key from base64 (DER format).1AoDecodes public key from base64.0BgCheck if a specific key version exists.CeConvenience function for HKDF-SHA256 with default \xe2\x80\xa6CgComputes HMAC-SHA256 of the message with the given key.CgComputes HMAC-SHA512 of the message with the given key.C`Creates parameters optimized for interactive \xe2\x80\xa6CkMemory size in KiB (recommended: 64 MiB = 65536 KiB for \xe2\x80\xa6CnDegree of parallelism (recommended: match CPU cores, e.g., \xe2\x80\xa6B`Argon2 parameters configuration.BnBLAKE3 digest output (32 bytes, default size).CjInvalid input parameter (e.g., wrong key size, empty data)AcInvalid nonce or IVBoMinimum key size that can be wrapped (16 bytes)00CiRSA public key for encryption and signature verification.BkRSA signature (length depends on key size).BaSHA-256 digest output (32 bytes).BaSHA-512 digest output (64 bytes).AnA versioned cryptographic key.BoReturns a mutable reference to the secret data.0ClCreates a <code>CryptoError</code> with a formatted message.CaDecrypts the last chunk and finalizes the stream.0B`Decrypts the next chunk of data.0CaEncrypts the last chunk and finalizes the stream.0B`Encrypts the next chunk of data.0AnGenerate a random 16-byte KEK.AnGenerate a random 32-byte KEK.AnGenerate a random 24-byte KEK.ChGenerates a random 16-byte key suitable for AES-128-GCM.ChGenerates a random 32-byte key suitable for AES-256-GCM.BoGenerates a random 32-byte key suitable for \xe2\x80\xa6BjGenerate a new random key for this cipher.BfKey rotation and versioning utilities.BbMaximum number of versions to keepClCreates a <code>RandomError</code> with a formatted message.AmReturns the secret key bytes.0C`Generates cryptographically secure random bytes.BoComputes SHA3-256 hash with hex-encoded output.BoComputes SHA3-512 hash with hex-encoded output.BiExports the keypair to PKCS#8 DER format.0BiExports the keypair to PKCS#8 PEM format.0BkEncoding/decoding error (base64, hex, etc.)CjTrait for AEAD ciphers that support key generation and \xe2\x80\xa6BoX25519 keypair for Diffie-Hellman key exchange.CmDerives a key from a password using Argon2id with default \xe2\x80\xa6CeDecodes a base64 string to bytes (standard encoding).CcEncodes bytes to base64 string (standard encoding).C`Creates a BLAKE3 hasher for incremental hashing.CgGenerates a 2048-bit RSA keypair (recommended minimum).CaGenerates a 4096-bit RSA keypair (high security).CiCreates parameters optimized for high-security scenarios.DdCreates an <code>InvalidInput</code> error with a formatted message.C`Generic PBKDF2 derivation (defaults to SHA-256).C`Get the number of key versions currently stored.DaCreates a new <code>SecretVec</code> with the specified capacity.BmEd25519 keypair for signing and verification.CbMaximum chunk size for streaming operations (1 MB)BbSHA3-256 digest output (32 bytes).BbSHA3-512 digest output (64 bytes).CmPerforms Diffie-Hellman key exchange with another party\xe2\x80\x99\xe2\x80\xa6CoCreates an <code>EncodingError</code> with a formatted message.BiImports a keypair from PKCS#8 DER format.0BiImports a keypair from PKCS#8 PEM format.0AnRemove a specific key version.AmX25519 public key (32 bytes).CbComputes BLAKE2b-512 hash with hex-encoded output.CbComputes BLAKE2s-256 hash with hex-encoded output.BlGet the current (latest) key version number.AlCurrent (latest) key versionCaRotate to a new key version using a provided key.BeBLAKE2b-512 digest output (64 bytes).BeBLAKE2s-256 digest output (32 bytes).AnChaCha20-Poly1305 AEAD cipher.AnEd25519 public key (32 bytes).AmEd25519 signature (64 bytes).BkChaCha20-Poly1305 authenticated encryption.CePerforms constant-time comparison of two byte slices.CgGenerates a random 16-byte key suitable for 128-bit \xe2\x80\xa6CiGenerates a random 32-byte key suitable for symmetric \xe2\x80\xa6CkHelper to safely access the private key for operations. \xe2\x80\xa6BkFeature not enabled (requires feature flag)BeInvalid ciphertext format or encodingBjDecodes a URL-safe base64 string to bytes.CiEncodes bytes to base64 string (URL-safe encoding, no \xe2\x80\xa6BhExtends the secret with additional data.CiFills a provided buffer with cryptographically secure \xe2\x80\xa6BlCreates a keypair from a 32-byte secret key.0BmExports the public key to SPKI DER format \xe2\x80\xa60BeExports the public key to PEM format.0CnCreate a new key rotation manager with a specified maximum \xe2\x80\xa6CcDefault chunk size for streaming operations (64 KB)BgManager for cryptographic key rotation.BcSerialization/deserialization errorB`X25519 shared secret (32 bytes).CcGet a list of all key versions currently available.CkEncrypts plaintext with an explicit nonce (advanced use \xe2\x80\xa6BmVerifies an HMAC-SHA256 tag in constant time.BmVerifies an HMAC-SHA512 tag in constant time.BjImports a public key from SPKI DER format.0BeImports a public key from PEM format.0BgDerives key material using HKDF-SHA256.BfAuthentication tag verification failedCgDerives a key from a password using PBKDF2-HMAC-SHA256.CgDerives a key from a password using PBKDF2-HMAC-SHA512.CiSigns a message and verifies it\xe2\x80\x99s correct (paranoid \xe2\x80\xa6BdStreaming decryptor for AES-256-GCM.BdStreaming encryptor for AES-256-GCM.ClDerives a key from a password using Argon2id with custom \xe2\x80\xa6AmSignature verification failedBjStreaming decryptor for ChaCha20-Poly1305.BjStreaming encryptor for ChaCha20-Poly1305.CmRecommended minimum iterations for PBKDF2-HMAC-SHA256 (as \xe2\x80\xa6CfRecommended minimum iterations for PBKDF2-HMAC-SHA512.")